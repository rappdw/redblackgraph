# Sample GitHub Actions CI Workflow
# This file should be placed at: .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint (Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          pip install -e .
      
      - name: Run pylint
        run: |
          pylint redblackgraph --rcfile=.pylintrc -d C,R

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install meson-python>=0.15.0
          pip install meson>=1.2.0
          pip install ninja
          pip install cython>=3.0
      
      - name: Install project with test dependencies
        run: |
          pip install -e ".[test]"
      
      - name: Create output directory
        run: mkdir -p _testing_output
      
      - name: Run tests with coverage
        run: |
          pytest --color=yes \
            --cov-config coverage.cfg \
            --cov=redblackgraph \
            --cov-fail-under=65 \
            --cov-report term-missing \
            --cov-report xml:coverage.xml \
            --cov-report html:_testing_output/coverage_html \
            --durations=10 \
            tests
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}
          fail_ci_if_error: false
          verbose: true
      
      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-py${{ matrix.python-version }}
          path: |
            coverage.xml
            _testing_output/coverage_html/
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-py${{ matrix.python-version }}
          path: _testing_output/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "Tests or linting failed"
            exit 1
          else
            echo "All tests and linting passed"
          fi
