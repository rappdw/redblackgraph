/* -*- c -*- */

/*
 *****************************************************************************
 **                            INCLUDES                                     **
 *****************************************************************************
 */
#include <stdio.h>
#include <Python.h>
#include <math.h>

#define NO_IMPORT_ARRAY
#define PY_ARRAY_UNIQUE_SYMBOL RBG_ARRAY_API

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include <numpy/noprefix.h>
#include <numpy/ndarraytypes.h>
#include <numpy/ndarrayobject.h>
#include <numpy/arrayscalars.h>
#include <numpy/ufuncobject.h>

#include "redblack.h"
#include "rbg_math.h"

/*
 *****************************************************************************
 **                             UFUNC LOOPS                                 **
 *****************************************************************************
 */

char *warshall_signature = "(m,m)->(m,m),()";

/**begin repeat
 * #name      = byte,          ubyte,         short,          ushort,         int,          uint,         long,          ulong,         longlong,          ulonglong#
 * #type      = npy_byte,      npy_ubyte,     npy_short,      npy_ushort,     npy_int,      npy_uint,     npy_long,      npy_ulong,     npy_longlong,      npy_ulonglong#
 * #utype     = npy_ubyte,     npy_ubyte,     npy_ushort,     npy_ushort,     npy_uint,     npy_uint,     npy_ulong,     npy_ulong,     npy_ulonglong,     npy_ulonglong#
 * #format    = u,             u,             u,              u,              u,            u,            lu,            lu,            llu,               llu#
 */

static void
@name@_warshall(char **args, npy_intp *dimensions, npy_intp *steps)
{
    /* pointers to data for input and output arrays */
    char *ipR1 = args[1]; // first pointer to R
    char *ipR2 = args[1]; // second pointer to R
    char *op = args[1];
    @type@ product;

    /* lengths of core dimensions */
    npy_intp dn = dimensions[0];

    /* striding over core dimensions */
    npy_intp isR_i = steps[0];
    npy_intp isR_j = steps[1];
    npy_intp os_i = steps[2];
    npy_intp os_j = steps[3];

    /* core dimensions counters */
    npy_intp i, j, k;

    /* diameter holder */
    @type@ diameter = 0;

    /* Step 1, copy input matrix to output matrix */
    memcpy(args[1], args[0], dn * isR_i);

    /* Step 2, run Floyd-Warshall over the output matrix */
    for (k = 0; k < dn; k++) {
        for (i = 0; i < dn; i++) {
            for (j = 0; j < dn; j++) {
                product = @name@_avos_product((*(@type@ *)ipR1), (*(@type@ *)ipR2));
                if (i == j && !(product == (@type@)-1 || product == 0 || product == 1)) {
                    PyErr_Format(PyExc_ValueError,
                                     "Error: cycle detected! Vertex %ld has a path to itself. A(%ld,%ld)=%@format@, A(%ld,%ld)=%@format@", \
                                     i, i, k, (@utype@)(*(@type@ *)ipR1), k, j, (@utype@)(*(@type@ *)ipR2)
                                     );
                }
                *(@type@ *)op = @name@_avos_sum(*(@type@ *)op, product);
                if ((@utype@)(~*(@type@ *)op) != 0 && *(@type@ *)op > diameter) diameter = *(@type@ *)op;

                // advance column of output, advance column of R2
                ipR2 += isR_j;
                op  +=  os_j;
            }
            // advance to next row and first column of output, advance row of R1, reset R2 to first column
            op -= os_j * dn;
            op += os_i;
            ipR1 += isR_i;
            ipR2 -= isR_j * dn;
        }
        // reset output, reset R1 to first row and set to column k, advance to next row and first column of R2
        op = args[1];
        ipR1 = args[1] + (k + 1) * isR_j;
        ipR2 += isR_i;
    }
    *(npy_intp *)args[2] = @name@_MSB(diameter);
}

static void
@name@_gufunc_warshall(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))
{
    /* outer dimensions counter */
    npy_intp N_;

    /* length of flattened outer dimensions */
    npy_intp dN = dimensions[0];

    /* striding over flattened outer dimensions for input and output arrays */
    // (m,m)->(m,m),()
    npy_intp s0 = steps[0];
    npy_intp s1 = steps[1];
    // npy_intp s2 = steps[2];

    /*
     * loop through outer dimensions, performing matrix multiply on
     * core dimensions for each loop
     */
    for (N_ = 0; N_ < dN; N_++, args[0] += s0, args[1] += s1) {
        @name@_warshall(args, dimensions+1, steps+3);
    }
}

/**end repeat**/


PyUFuncGenericFunction warshall_functions[] = {
/**begin repeat
 * #name   = byte,          ubyte,         short,          ushort,         int,          uint,         long,          ulong,         longlong,          ulonglong#
 */
    &@name@_gufunc_warshall,
/**end repeat**/
};
void *warshall_data[] = {
/**begin repeat
 * #name   = byte,          ubyte,         short,          ushort,         int,          uint,         long,          ulong,         longlong,          ulonglong#
 */
    (void *)NULL,
/**end repeat**/
};

char warshall_signatures[] = {
/**begin repeat
 * #type_num = NPY_BYTE,      NPY_UBYTE,     NPY_SHORT,      NPY_USHORT,     NPY_INT,      NPY_UINT,     NPY_LONG,      NPY_ULONG,     NPY_LONGLONG,      NPY_ULONGLONG#
 */
    @type_num@, @type_num@, NPY_INT,
/**end repeat**/
};


