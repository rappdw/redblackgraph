#include <Python.h>
#include <stdlib.h>

#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/npy_3kcompat.h>
#include <numpy/arrayscalars.h>

#include "rbg_math.h"

/**begin repeat
 * #name      = byte,          ubyte,         short,          ushort,         int,          uint,         long,          ulong,         longlong,          ulonglong#
 * #type      = npy_byte,      npy_ubyte,     npy_short,      npy_ushort,     npy_int,      npy_uint,     npy_long,      npy_ulong,     npy_longlong,      npy_ulonglong#
 * #utype     = npy_ubyte,     npy_ubyte,     npy_ushort,     npy_ushort,     npy_uint,     npy_uint,     npy_ulong,     npy_ulong,     npy_ulonglong,     npy_ulonglong#
 * #type_num  = NPY_BYTE,      NPY_UBYTE,     NPY_SHORT,      NPY_USHORT,     NPY_INT,      NPY_UINT,     NPY_LONG,      NPY_ULONG,     NPY_LONGLONG,      NPY_ULONGLONG#
 * #stype_num = NPY_BYTE,      NPY_BYTE,      NPY_SHORT,      NPY_SHORT,      NPY_INT,      NPY_INT,      NPY_LONG,      NPY_LONG,      NPY_LONGLONG,      NPY_LONGLONG#
 * #temptype  = npy_byte,      npy_ubyte,     npy_short,      npy_ushort,     npy_int,      npy_uint,     npy_long,      npy_ulong,     npy_longlong,      npy_ulonglong#
 */

NPY_NO_EXPORT @type@ @name@_avos_sum(@type@ a, @type@ b)
{
    if (a == 0 || (@utype@)~b == 0) return b;
    if (b == 0 || (@utype@)~a == 0) return a;
    if (((@utype@)a) < ((@utype@)b)) return a;
    return b;
}

NPY_NO_EXPORT int @name@_MSB(@type@ x)
{
    if ((@utype@)~x == 0) return 0;
    int targetlevel = 0;
    while (x >>= 1) {
        targetlevel += 1;
    }
    return targetlevel;
}

NPY_NO_EXPORT @utype@ @name@_avos_product(@type@ lhs, @type@ rhs)
{
    @utype@ x = (@utype@)lhs;
    @utype@ y = (@utype@)rhs;

    // The zero property of the avos product
    if (x == 0 || y == 0) {
        return 0;
    }
    // Special case -1 * 1 or -1 * -1
    // There is an oddity in bitwise NOT of an unsigned char, ~<unsigned char> temporary is an <int> rather
    // than an <unsigned char>. Because of this, cast ~x and ~y to the appropriate type
    if ((@utype@)~x == 0) {
        if (y == 1) {
            return x;
        }
        x = 1;
    }
    if ((@utype@)~y == 0) {
        if (x == 1) {
            return y;
        }
        y = 1;
    }

    int bit_position = @name@_MSB(y);
//    if (bit_position == (sizeof(x) * 8) - 1) {
//        // Overflow Error
//        PyErr_Format(PyExc_OverflowError,
//                         "Avos product of %d and %d, results in an overflow", \
//                         lhs, rhs
//                         );
//    }
    return ((y & ((@type@)pow(2, bit_position) - 1)) | (x << bit_position));
}

/**end repeat**/
