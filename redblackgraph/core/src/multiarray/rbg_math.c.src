#include <Python.h>
#include <stdlib.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/npy_3kcompat.h>
#include <numpy/arrayscalars.h>

#include "rbg_math.h"

/**begin repeat
 * #name = int, long, longlong#
 * #type = npy_int, npy_long, npy_longlong#
 * #temptype = npy_int, npy_long, npy_longlong#
 */

NPY_NO_EXPORT @type@ @name@_avos_sum(@type@ a, @type@ b)
{
    if (a == -b) return 0;
    if (a == 0) return b;
    if (b == 0) return a;
    if (a < b) return a;
    return b;

}

NPY_NO_EXPORT int @name@_leftmost_significant_bit_position(@type@ x)
{
    int targetlevel = 0;
    while (x >>= 1) {
        targetlevel += 1;
    }
    return targetlevel;
}

NPY_NO_EXPORT int @name@_compute_sign(@type@ x, @type@ y)
{
    int a = x >= 0;
    int b = y >= 0;
    int c = x == -1;
    int d = y == -1;
    if ((!a || !b) && (!c && !d)) return 0;
    if ((!a && !b) || ((!a || !b) && (x == 1 || y ==1))) return -1;
    return 1;
}

NPY_NO_EXPORT @type@ @name@_avos_product(@type@ x, @type@ y)
{
    int sign = @name@_compute_sign(x, y);
    x = abs(x);
    y = abs(y);

    // zero property
    if (x == 0 || y == 0) {
        return 0;
    }

    int bit_position = @name@_leftmost_significant_bit_position(y);
    return sign * ((y & (@type@)pow(2, bit_position) - 1) | (x << bit_position));
}

/**end repeat**/
