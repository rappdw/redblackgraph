#!/usr/bin/env python3

# Python script to run containers associated with this project
#
import argparse
import subprocess
import shlex
import os

run_cmd = {'prod': 'docker run {keep_container} {interactive} -v /data:/data {project}-prod /bin/bash',
           'dev': 'docker run {keep_container} {interactive} -p 8888:8888 -v {root}:/{workdir} {project}-dev',
           'notebook': 'docker run {keep_container} {interactive} -p 8888:8888 -v {root}:/{workdir} {project}-dev dev-start-notebook.sh',
           'jenkins': 'docker run {keep_container} {interactive} -v {root}/dist:/{workdir}/dist -v {root}/.git:/{workdir}/.git:ro {project}-jenkins /bin/bash'}

def get_default_root():
    return os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

def get_default_project_name():
    return os.path.basename(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def run(mode, root=get_default_root(), project=get_default_project_name(), workdir='workdir', keep_container=False):
    it = '-d' if keep_container else '-it'
    keep = '' if keep_container else '--rm'
    cmd = run_cmd[mode].format(root=root, project=project.lower(), workdir=workdir, keep_container=keep, interactive=it)
    print(f"running: {cmd}")
    subprocess.call(shlex.split(cmd))


if __name__ == '__main__':
    image_types = ['prod', 'dev', 'jenkins', 'notebook']
    parser = argparse.ArgumentParser()
    parser.add_argument("image", choices=image_types, help="image to build")
    parser.add_argument("--keep", "-k", help="keep the image after execution", action='store_true')
    # TODO: figure out workdir in common with Dockerfiles
    args = parser.parse_args()

    image_to_run = args.image
    run(image_to_run, keep_container=args.keep)