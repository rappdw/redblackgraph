name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint (Python 3.12)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Generate __config__.py
        run: python generate_config.py
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "numpy>=1.26.0,<2.0"
          pip install meson-python>=0.15.0
          pip install meson>=1.2.0
          pip install ninja
          pip install cython>=3.0
          pip install tempita>=0.5.2
          pip install pylint
          pip install -e . --no-build-isolation
      
      - name: Run pylint
        run: |
          mkdir -p _testing_output
          pylint redblackgraph --rcfile=.pylintrc -d C,R | tee _testing_output/pylint_output.txt

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-pip-
      
      - name: Generate __config__.py
        run: python generate_config.py
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "numpy>=1.26.0,<2.0"
          pip install meson-python>=0.15.0
          pip install meson>=1.2.0
          pip install ninja
          pip install cython>=3.0
          pip install tempita>=0.5.2  # Required for template processing
      
      - name: Install project with test dependencies
        run: |
          pip install -e ".[test]" --no-build-isolation
      
      - name: Create output directory
        run: mkdir -p _testing_output
      
      - name: Run tests with coverage
        run: |
          export GIT_HASH=$(git log --pretty=format:'%h' -n 1)
          echo "GIT_HASH: $GIT_HASH" > _testing_output/pytest_output.txt
          pytest --color=yes \
            --cov-config coverage.cfg \
            --cov=redblackgraph \
            --cov-fail-under=65 \
            --cov-report term-missing \
            --cov-report xml:coverage.xml \
            --cov-report html:_testing_output/coverage_html \
            --durations=10 \
            tests | tee -a _testing_output/pytest_output.txt
      
      - name: Generate coverage summary
        if: always()
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both
          fail_below_min: true
          thresholds: '65 80'
      
      - name: Add coverage to job summary
        if: always()
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Report for Python ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "Full HTML coverage report is available in artifacts." >> $GITHUB_STEP_SUMMARY
      
      - name: Add coverage PR comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md
      
      - name: Upload coverage report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            coverage.xml
            _testing_output/coverage_html/
          retention-days: 30
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}
          path: _testing_output/
          retention-days: 30

  coverage-badge:
    name: Update Coverage Badge
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-py3.12
      
      - name: Extract coverage percentage
        id: coverage
        run: |
          # Extract coverage from XML
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"
      
      - name: Create coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: redblackgraph-coverage.json
          label: coverage
          message: ${{ steps.coverage.outputs.percentage }}%
          valColorRange: ${{ steps.coverage.outputs.percentage }}
          maxColorRange: 100
          minColorRange: 0

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "❌ Tests or linting failed"
            exit 1
          else
            echo "✅ All tests and linting passed"
          fi
