name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v0.5.1)'
        required: true

jobs:
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for setuptools_scm to detect version from tags
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Generate __config__.py
        run: python generate_config.py
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          pip install meson-python>=0.15.0
          pip install meson>=1.2.0
          pip install ninja
          pip install cython>=3.0
          pip install tempita>=0.5.2  # Required for template processing
      
      - name: Build source distribution
        run: python -m build --sdist
      
      - name: Upload sdist artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]  # macos-13 is x86_64, macos-14 is arm64
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for setuptools_scm to detect version from tags
      
      - name: Set up MSVC (Windows only)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD_VERBOSITY: 1
      
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  create-release:
    name: Create GitHub Release
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: artifacts/
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: artifacts/sdist/
      
      - name: Prepare release files
        run: |
          mkdir -p release_files
          # Copy wheels from all artifact directories
          find artifacts/ -name '*.whl' -exec cp {} release_files/ \;
          # Copy sdist
          find artifacts/ -name '*.tar.gz' -exec cp {} release_files/ \;
          echo "=== Release files ==="
          ls -lh release_files/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release_files/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [create-release]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: artifacts/
      
      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: artifacts/sdist/
      
      - name: Prepare distribution directory
        run: |
          mkdir -p dist/
          # Copy wheels from all artifact directories
          find artifacts/ -name '*.whl' -exec cp {} dist/ \;
          # Copy sdist
          find artifacts/ -name '*.tar.gz' -exec cp {} dist/ \;
      
      - name: List all files
        run: |
          echo "=== Distribution files ==="
          ls -lh dist/
          echo "=== File count ==="
          echo "Wheels: $(ls dist/*.whl 2>/dev/null | wc -l)"
          echo "Sdist: $(ls dist/*.tar.gz 2>/dev/null | wc -l)"
      
      - name: Verify wheels are valid
        run: |
          pip install check-wheel-contents
          for wheel in dist/*.whl; do
            echo "Checking $wheel"
            python -m zipfile -t "$wheel" || echo "WARNING: $wheel may be corrupted"
            check-wheel-contents "$wheel" || echo "WARNING: $wheel failed check"
          done
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
